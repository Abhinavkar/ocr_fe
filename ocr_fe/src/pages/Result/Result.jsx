import React, { useState, useEffect, useContext } from 'react';
import './Result.css';
import { useNavigate } from 'react-router-dom';
import { UserContext } from '../../UserContext';
import { Table, Button } from 'antd';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import SideNav from '../../components/SideNav';

export const Result = () => {
    const { user } = useContext(UserContext);
    const navigate = useNavigate();
    const [results, setResults] = useState([]);
    const [classes, setClasses] = useState([]);
    const [sections, setSections] = useState([]);

    useEffect(() => {
        const fetchResults = async () => {
            const response = await fetch('http://localhost:8000/api/qa/results/', {
                method: 'GET',
                headers: {
                    'organizationId': user.organization_id,
                },
            });

            if (response.ok) {
                const data = await response.json();
                setResults(data);
            }
        };

        const fetchClasses = async () => {
            const response = await fetch(`http://localhost:8000/api/services/classes/${user.organization_id}`, {
                method: 'GET',
                headers: {
                    'userId': user.id,
                },
            });

            if (response.ok) {
                const data = await response.json();
                setClasses(data);
            }
        };

        const fetchSection = async () => {
            const response = await fetch(`http://localhost:8000/api/services/sections/`, {
                method: 'GET',
                headers: {
                    'userId': user.id,
                },
            });

            if (response.ok) {
                const data = await response.json();
                setSections(data);
            }
        };

        fetchSection();
        fetchResults();
        fetchClasses();
    }, [user.organization_id, user.id]);

    const handleLogout = () => {
        localStorage.removeItem('token');
        localStorage.removeItem('is_admin');
        navigate('/');
    };

    const handleDownload = async (result) => {
        const doc = new jsPDF();
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(0, 0, 128);
        doc.text('Student Result Card', 105, 20, { align: 'center' });
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(0, 0, 0);
        doc.text(`${user.organization}`, 105, 30, { align: 'center' });
        doc.setLineWidth(0.5);
        doc.setDrawColor(0, 0, 0);
        doc.line(10, 35, 200, 35);
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(0, 0, 0);
        doc.text('Document ID:', 10, 45);
        doc.text('Exam ID:', 10, 55);
        doc.text('Class:', 10, 65);
        doc.text('Section:', 10, 75);
        doc.text('Subject:', 10, 85);
        doc.text('Roll No:', 10, 95);
        doc.text('Score:', 10, 105);
        doc.text('Document Uploaded By:', 10, 115);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(0, 0, 128);
        doc.text(`${result._id}`, 60, 45);
        doc.text(`${result.exam_id}`, 60, 55);
        doc.text(`${result.class_name}`, 60, 65);
        doc.text(`${result.section_name}`, 60, 75);
        doc.text(`${result.subject_name}`, 60, 85);
        doc.text(`${result.roll_no}`, 60, 95);
        doc.text(`${result.scores}`, 60, 105);
        doc.text('Abhinav Kar', 60, 115);
        doc.setFontSize(10);
        doc.setFont('helvetica', 'italic');
        doc.setTextColor(128, 128, 128);
        doc.text('Generated by OCR System', 105, 285, { align: 'center' });

        // Add a table for the results
        const tableColumn = ["Question", "User Answer", "Model Answer", "Score"];
        const tableRows = [];

        result.results.forEach(item => {
            const rowData = [
                item.question,
                Object.values(item.user_answer).join("\n"),
                item.model_generated_answer,
                Object.values(item.scores).join("\n")
            ];
            tableRows.push(rowData);
        });

        doc.autoTable({
            head: [tableColumn],
            body: tableRows,
            startY: 130,
            theme: 'grid',
            headStyles: { fillColor: [0, 0, 128] },
            styles: { fontSize: 10, cellPadding: 3 },
        });

        doc.save(`result_${result._id}.pdf`);
    };

    const handleTableChange = (pagination, filters, sorter) => {
        console.log('Table params:', pagination, filters, sorter);
    };

    const columns = [
        {
            title: 'S No',
            dataIndex: 'sno',
            key: 'sno',
            render: (text, record, index) => index + 1,
            sorter: (a, b) => a.sno - b.sno,
        },
        {
            title: 'Exam ID',
            dataIndex: 'exam_id',
            key: 'exam_id',
            // filters: [
            //     { text: 'Exam 1', value: 'Exam 1' },
            //     { text: 'Exam 2', value: 'Exam 2' },
            // ],
            // onFilter: (value, record) => record.exam_id.includes(value),
            sorter: (a, b) => a.exam_id.localeCompare(b.exam_id),
        },
        {
            title: 'Class',
            dataIndex: 'class_name',
            key: 'class_name',
            filters: classes.map(cls => ({ text: cls.name, value: cls.name })),
            onFilter: (value, record) => record.class_name.includes(value),
            sorter: (a, b) => a.class_name.localeCompare(b.class_name),
        },
        {
            title: 'Section',
            dataIndex: 'section_name',
            key: 'section_name',
            filters: sections.map(section => ({ text: section.name, value: section.name })),
            onFilter: (value, record) => record.section_name.includes(value),
            sorter: (a, b) => a.section_name.localeCompare(b.section_name),
        },
        {
            title: 'Subject',
            dataIndex: 'subject_name',
            key: 'subjects',
            sorter: (a, b) => a.subjects.localeCompare(b.subjects),
        },
        {
            title: 'Roll No',
            dataIndex: 'roll_no',
            key: 'roll_no',
            sorter: (a, b) => a.roll_no - b.roll_no,
        },
        {
            title: 'Score',
            dataIndex: 'similarity_score',
            key: 'similarity_score',
            sorter: (a, b) => a.similarity_score - b.similarity_score,
        },
        {
            title: 'Document Uploaded By',
            dataIndex: 'uploaded_by',
            key: 'uploaded_by',
            render: () => 'Digant Mohanty',
        },
        {
            title: 'Get Report',
            key: 'action',
            render: (text, record) => (
                <Button onClick={() => handleDownload(record)}>Download</Button>
            ),
        },
        {
            title: 'Reevaluate',
            key: 'action',
            render: (text, record) => (
                <Button>Reevaluate</Button>
            ),
        },
        {
            title: 'Delete',
            key: 'action',
            render: (text, record) => (
                <Button>Delete</Button>
            ),
        },
    ];

    return (
        <div className="result-page">
            <SideNav />
            <div className="result-content">
                <div className="result-container">
                    <h2>{user.organization} Results</h2>
                    <Table
                        columns={columns}
                        dataSource={results}
                        rowKey="document_id"
                        onChange={handleTableChange}
                    />
                </div>
                <div>
                    Result Reevaluation Section
                </div>
            </div>
        </div>
    );
};

export default Result;

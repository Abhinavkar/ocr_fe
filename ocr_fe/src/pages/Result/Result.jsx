import React, { useState, useEffect, useContext } from 'react';
import './Result.css';
import LogoSvg from "../../assets/images/logo.svg";
import DashboardPng from "../../assets/images/dashboard.png";
import DownloadPng from "../../assets/images/download.png";
import LogoutPng from "../../assets/images/logout.png";
import { useNavigate } from 'react-router-dom';
import { UserContext } from '../../UserContext';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import SideNav from '../../components/SideNav';

export const Result = () => {
    const { user } = useContext(UserContext);
    const navigate = useNavigate();
    const [results, setResults] = useState([]);
    const [classes, setClasses] = useState([]);
    const [sections, setSections] = useState([]);

    useEffect(() => {
        const fetchResults = async () => {
            const response = await fetch('http://localhost:8000/api/qa/results/', {
                method: 'GET',
                // headers:{
                //     "orgId":user.organization_id
                    
                // }
            });

            if (response.ok) {
                const data = await response.json();
                setResults(data);
            }
        };

        const fetchClasses = async () => {
            const response = await fetch(`http://localhost:8000/api/services/classes/${user.organization_id}`, {
                method: 'GET',
            });

            if (response.ok) {
                const data = await response.json();
                setClasses(data);
            }
        };

        // const fetchSection = async () => {
        //     const response = await fetch(`http://localhost:8000/api/services/sections/`, {
        //         method: 'GET',
        //     });

        //     if (response.ok) {
        //         const data = await response.json();
        //         setSections(data);
        //     }
        // };

        // fetchSection();
        fetchResults();
        fetchClasses();
    }, [user.organization_id]);

    const handleLogout = () => {
        localStorage.removeItem('token');
        localStorage.removeItem('is_admin');
        navigate('/');
    };

    const getClassById = (id) => {
        const classItem = classes.find((classItem) => classItem._id === id);
        return classItem ? classItem.name : 'Unknown Class';
    };

    const getSectionById = (id) => {
        const secItem = sections.find((secItem) => secItem._id === id);
        return secItem ? secItem.name : 'Unknown Section';
    };

    const handleDownload = async (result) => {
        const doc = new jsPDF();

        // Add title
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.text('Student Result Card', 105, 20, null, null, 'center');

        // Add organization name
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        doc.text(user.organization, 105, 30, null, null, 'center');

        // Add a line separator
        doc.setLineWidth(0.5);
        doc.line(10, 35, 200, 35);

        // Add student details
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`Document ID: ${result.document_id}`, 10, 45);
        doc.text(`Exam ID: ${result.exam_id}`, 10, 55);
        doc.text(`Class: ${getClassById(result.class_id)}`, 10, 65);
        doc.text(`Section: A`, 10, 75);
        doc.text(`Subject: Physics`, 10, 85);
        doc.text(`Roll No: ${result.roll_no}`, 10, 95);
        doc.text(`Score: 86%`, 10, 105);
        doc.text(`Document Uploaded By: Abhinav Kar`, 10, 115);

        // Add a footer
        doc.setFontSize(10);
        doc.setFont('helvetica', 'italic');
        doc.text('Generated by OCR System', 105, 285, null, null, 'center');

        doc.save(`result_${result.document_id}.pdf`);
    };

    return (
        <div className="result-page">
           <SideNav />
            <div className="result-content">
                <div className="result-container">
                    <h2>{user.organization} Results</h2>
                    <table className="result-table">
                        <thead>
                            <tr>
                                <th>S No</th>
                                <th>Exam ID</th>
                                <th>Class</th>
                                <th>Section</th>
                                <th>Subject</th>
                                <th>Roll No</th>
                                <th>Score</th>
                                <th>Document Uploaded By</th>
                                <th>Get Report</th>
                            </tr>
                        </thead>
                        <tbody>
                            {results.map((result, i) => (
                                <tr key={result.document_id}>
                                    <td>{i + 1}</td>
                                    <td>{result.exam_id}</td>
                                    <td>{getClassById(result.class_id)}</td>
                                    <td>{result.section}</td>
                                    <td>{result.subject}</td>
                                    <td>{result.roll_no}</td>
                                    <td>{result.similarity_score}</td>
                                    
                                    <td>Abhinav Kar</td>
                                    <td><button onClick={() => handleDownload(result)}>Download</button></td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
                <div>
                    Result Reevaluation Section
                </div>
            </div>
        </div>
    );
};

export default Result;
